import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;


class Pairs{

    private String ngram;
    private int freq;

    Pairs(String ngram, int freq){
        this.ngram = ngram;
        this.freq = freq;
    }

    public static Comparator<Pairs> comp = Comparator.comparingInt(Pairs::getFreq);

    public String getSymbol() {
        return ngram;
    }

    public int getFreq() {
        return freq;
    }

    public void setFreq(int freq) {
        this.freq = freq;
    }
}


class Main{

    //20 monogram probabilities for each language in descending order.
    private static final double[][] mono_freqs   = {/*English*/  {0.1210, 0.0894, 0.0855, 0.0747, 0.0733, 0.0717, 0.0673, 0.0633, 0.0496, 0.0421, 0.0387, 0.0316, 0.0268, 0.0253, 0.0218, 0.0209, 0.0207, 0.0183, 0.0172, 0.0160, 0.0106, 0.0081, 0.0022, 0.0019, 0.0011, 0.0010},
                                                    /*French*/   {0.1447, 0.0798, 0.0760, 0.0732, 0.0721, 0.0711, 0.0686, 0.0586, 0.0555, 0.0539, 0.0408, 0.0339, 0.0298, 0.0278, 0.0243, 0.0129, 0.0118, 0.0112, 0.0096, 0.0093, 0.0085, 0.0043, 0.0043, 0.0042, 0.0034, 0.0030},
                                                    /*German*/   {0.1599, 0.0959, 0.0771, 0.0760, 0.0643, 0.0641, 0.0634, 0.0492, 0.0411, 0.0376, 0.0372, 0.0302, 0.0275, 0.0275, 0.0271, 0.0221, 0.0180, 0.0150, 0.0140, 0.0122, 0.0106, 0.0094, 0.0063, 0.0054, 0.0027, 0.0024},
                                                    /*Spanish*/  {0.1324, 0.1250, 0.0898, 0.0744, 0.0709, 0.0691, 0.0662, 0.0584, 0.0514, 0.0443, 0.0442, 0.0400, 0.0275, 0.0261, 0.0127, 0.0117, 0.0098, 0.0083, 0.0081, 0.0079, 0.0079, 0.0045, 0.0042, 0.0022, 0.0019, 0.0008},
                                                    /*Danish*/   {0.1545, 0.0896, 0.0724, 0.0686, 0.0603, 0.0600, 0.0586, 0.0581, 0.0523, 0.0464, 0.0408, 0.0339, 0.0324, 0.0241, 0.0233, 0.0200, 0.0198, 0.0176, 0.0162, 0.0119, 0.0094, 0.0087, 0.0073, 0.0070, 0.0056, 0.0007},
                                                    /*Finnish*/  {0.1222, 0.1082, 0.0883, 0.0875, 0.0797, 0.0786, 0.0576, 0.0561, 0.0501, 0.0497, 0.0358, 0.0320, 0.0287, 0.0225, 0.0204, 0.0185, 0.0184, 0.0174, 0.0104, 0.0044, 0.0039, 0.0028, 0.0028, 0.0019, 0.0009, 0.0005},
                                                    /*Icelandic*/{0.1011, 0.0858, 0.0771, 0.0758, 0.0642, 0.0563, 0.0495, 0.0456, 0.0453, 0.0439, 0.0424, 0.0404, 0.0331, 0.0301, 0.0244, 0.0217, 0.0187, 0.0180, 0.0158, 0.0157, 0.0145, 0.0114, 0.0104, 0.0099, 0.0090, 0.0087},
                                                    /*Swedish*/  {0.1015, 0.0938, 0.0854, 0.0843, 0.0769, 0.0659, 0.0582, 0.0528, 0.0470, 0.0448, 0.0347, 0.0314, 0.0286, 0.0242, 0.0209, 0.0203, 0.0192, 0.0184, 0.0180, 0.0154, 0.0149, 0.0134, 0.0131, 0.0071, 0.0061, 0.0016},
                                                    /*Polish*/   {0.0902, 0.0809, 0.0790, 0.0751, 0.0581, 0.0517, 0.0506, 0.0478, 0.0446, 0.0396, 0.0394, 0.0370, 0.0354, 0.0323, 0.0292, 0.0273, 0.0259, 0.0236, 0.0226, 0.0182, 0.0154, 0.0139, 0.0125, 0.0098, 0.0095, 0.0089},
                                                    /*Russian*/  {0.1061, 0.0821, 0.0804, 0.0798, 0.0672, 0.0583, 0.0571, 0.0538, 0.0475, 0.0432, 0.0349, 0.0311, 0.0295, 0.0282, 0.0228, 0.0200, 0.0191, 0.0188, 0.0161, 0.0155, 0.0139, 0.0136, 0.0123, 0.0102, 0.0080, 0.0063},
    };
    //20 bigram probabilities for each language in descending order
    /*private static final double[][] bi_freqs   ={{0.0271, 0.0233, 0.0203, 0.0178, 0.0161, 0.0141, 0.0132, 0.0132, 0.0125, 0.0117, 0.0113, 0.0112, 0.0108, 0.0107, 0.0107, 0.0106, 0.0100, 0.0099, 0.0098, 0.0098, 0.0089, 0.0088, 0.0088, 0.0087, 0.0086, 0.0083},
                                                 {0.0291, 0.0208, 0.0202, 0.0197, 0.0170, 0.0169, 0.0162, 0.0128, 0.0125, 0.0121, 0.0119, 0.0115, 0.0109, 0.0104, 0.0101, 0.0096, 0.0096, 0.0094, 0.0093, 0.0093, 0.0088, 0.0087, 0.0086, 0.0086, 0.0084, 0.0082},
                                                 {0.0390, 0.0361, 0.0236, 0.0231, 0.0198, 0.0198, 0.0171, 0.0168, 0.0148, 0.0145, 0.0121, 0.0119, 0.0117, 0.0117, 0.0113, 0.0111, 0.0107, 0.0089, 0.0089, 0.0087, 0.0083, 0.0081, 0.0081, 0.0080, 0.0077, 0.0073},
                                                 {0.0257, 0.0231, 0.0227, 0.0201, 0.0180, 0.0179, 0.0161, 0.0156, 0.0152, 0.0147, 0.0143, 0.0143, 0.0142, 0.0133, 0.0124, 0.0122, 0.0121, 0.0115, 0.0113, 0.0111, 0.0109, 0.0100, 0.0098, 0.0098, 0.0098, 0.0096},
                                                 {0.0379, 0.0281, 0.0275, 0.0186, 0.0181, 0.0139, 0.0137, 0.0131, 0.0127, 0.0118, 0.0116, 0.0114, 0.0112, 0.0104, 0.0104, 0.0097, 0.0094, 0.0094, 0.0092, 0.0089, 0.0086, 0.0084, 0.0083, 0.0082, 0.0080, 0.0080},
                                                 {0.0214, 0.0195, 0.0195, 0.0190, 0.0171, 0.0154, 0.0136, 0.0133, 0.0123, 0.0121, 0.0116, 0.0115, 0.0111, 0.0111, 0.0108, 0.0106, 0.0105, 0.0105, 0.0104, 0.0100, 0.0100, 0.0098, 0.0092, 0.0092, 0.0092, 0.0092},
                                                 {0.0192, 0.0178, 0.0168, 0.0140, 0.0132, 0.0125, 0.0120, 0.0115, 0.0107, 0.0107, 0.0106, 0.0102, 0.0101, 0.0095, 0.0094, 0.0087, 0.0084, 0.0083, 0.0080, 0.0077, 0.0077, 0.0076, 0.0072, 0.0072, 0.0070, 0.0069},
                                                 {0.0244, 0.0211, 0.0210, 0.0175, 0.0161, 0.0127, 0.0127, 0.0122, 0.0121, 0.0118, 0.0110, 0.0107, 0.0103, 0.0101, 0.0098, 0.0097, 0.0097, 0.0094, 0.0091, 0.0088, 0.0088, 0.0086, 0.0082, 0.0080, 0.0080, 0.0078},
                                                 {0.0231, 0.0179, 0.0127, 0.0123, 0.0120, 0.0113, 0.0105, 0.0099, 0.0099, 0.0093, 0.0093, 0.0086, 0.0084, 0.0084, 0.0083, 0.0079, 0.0079, 0.0078, 0.0078, 0.0076, 0.0076, 0.0076, 0.0075, 0.0073, 0.0071, 0.0070},
                                                 {0.0162, 0.0128, 0.0123, 0.0123, 0.0122, 0.0121, 0.0115, 0.0112, 0.0104, 0.0104, 0.0103, 0.0100, 0.0096, 0.0092, 0.0092, 0.0088, 0.0087, 0.0085, 0.0080, 0.0079, 0.0078, 0.0076, 0.0075, 0.0074, 0.0073, 0.0071},
    };

    //20 trigram probabilities for each language in descending order
    private static final double[][] tri_freqs   =   {{0.0046, 0.0042, 0.0036, 0.0032, 0.0031, 0.0030, 0.0029, 0.0029, 0.0028, 0.0027, 0.0027, 0.0026, 0.0025, 0.0025, 0.0024, 0.0024, 0.0023, 0.0022, 0.0022, 0.0022},
                                                    {0.0086, 0.0071, 0.0056, 0.0054, 0.0052, 0.0051, 0.0049, 0.0042, 0.0038, 0.0037, 0.0037, 0.0037, 0.0037, 0.0037, 0.0036, 0.0035, 0.0032, 0.0031, 0.0031, 0.0031},
                                                    {0.0104, 0.0083, 0.0076, 0.0075, 0.0072, 0.0062, 0.0058, 0.0056, 0.0051, 0.0048, 0.0048, 0.0044, 0.0044, 0.0044, 0.0042, 0.0042, 0.0041, 0.0039, 0.0038, 0.0038},
                                                    {0.0075, 0.0074, 0.0067, 0.0056, 0.0055, 0.0054, 0.0052, 0.0051, 0.0050, 0.0049, 0.0048, 0.0047, 0.0047, 0.0045, 0.0040, 0.0038, 0.0036, 0.0035, 0.0034, 0.0032},
                                                    {0.0079, 0.0071, 0.0064, 0.0058, 0.0055, 0.0054, 0.0053, 0.0048, 0.0046, 0.0042, 0.0040, 0.0039, 0.0037, 0.0036, 0.0035, 0.0034, 0.0033, 0.0033, 0.0033, 0.0033},
                                                    {0.0061, 0.0058, 0.0056, 0.0046, 0.0043, 0.0034, 0.0034, 0.0033, 0.0033, 0.0033, 0.0033, 0.0032, 0.0032, 0.0031, 0.0031, 0.0031, 0.0031, 0.0030, 0.0029, 0.0029},
                                                    {0.0056, 0.0043, 0.0039, 0.0039, 0.0036, 0.0034, 0.0032, 0.0031, 0.0030, 0.0030, 0.0029, 0.0029, 0.0027, 0.0027, 0.0026, 0.0026, 0.0026, 0.0024, 0.0024, 0.0024},
                                                    {0.0065, 0.0055, 0.0048, 0.0047, 0.0047, 0.0047, 0.0046, 0.0045, 0.0044, 0.0041, 0.0038, 0.0038, 0.0037, 0.0034, 0.0033, 0.0033, 0.0033, 0.0032, 0.0031, 0.0030},
                                                    {0.0079, 0.0047, 0.0042, 0.0040, 0.0040, 0.0040, 0.0036, 0.0036, 0.0033, 0.0031, 0.0030, 0.0029, 0.0029, 0.0028, 0.0028, 0.0028, 0.0026, 0.0026, 0.0025, 0.0024},
                                                    {0.0046, 0.0042, 0.0036, 0.0032, 0.0031, 0.0030, 0.0029, 0.0029, 0.0028, 0.0027, 0.0027, 0.0026, 0.0025, 0.0025, 0.0024, 0.0024, 0.0023, 0.0022, 0.0022, 0.0022},
    };*/

    public static final int scope=26;
    private static final int langs=10;
    // TODO: Run n-gram / word stats analysis on relevant formally and informally written corpora including punctuation and capitals for greater potential accuracy during frequency comparisons.

    public static void main (String args[]) throws IOException {

        String cipher = new String(Files.readAllBytes(Paths.get("encrypted_text.txt")), "Windows-1252");
        cipher = cipher.replaceAll("[\n\r]", "");
        int cipher_len = cipher.length();


        Pairs[] monograms = getNgrams(cipher, 1);
        getNgrams(cipher, 2);
        getNgrams(cipher, 3);
        getNgrams(cipher, 4);
        getNgrams(cipher, 5);


        ArrayList<Pairs> monofit = new ArrayList<>();

        for(int i=0;i<langs;++i){
            double monosum=0;
            for(int j=0;j<scope;++j)
                monosum += Math.abs(monograms[j].getFreq() - (mono_freqs[i][j] * cipher_len));

            String lang = getLang(i);
            monofit.add(new Pairs(lang, (int)monosum));
        }
        monofit.sort(Pairs.comp);

        for(int i=0;i<langs;++i)
            System.out.print(monofit.get(i).getSymbol()+" "+monofit.get(i).getFreq()+" | ");
        System.out.println();
    }

    private static Pairs[] getNgrams(String cipher, int len){

        ArrayList<Pairs> pairsList = new ArrayList<>();

        boolean exists = false;
        for(int i=0; i<cipher.length()-len;++i) {


            for (Pairs ps : pairsList) {
                if(cipher.substring(i, i + len).equals(ps.getSymbol())) {
                    ps.setFreq(ps.getFreq() + 1);
                    exists = true;
                }
            }
            if(!exists && !cipher.substring(i, i + len).contains("r"))
                pairsList.add(new Pairs(cipher.substring(i,i+len), 1));
            exists=false;
        }
        pairsList.sort(Pairs.comp.reversed());
        Pairs[] temp = new Pairs[scope];
        for(int i=0; i<temp.length && i<pairsList.size();++i) {
            temp[i] = pairsList.get(i);
            System.out.printf("%-6s:(%-3s) | ",temp[i].getSymbol(), temp[i].getFreq());
        }
        System.out.println();
        return temp;
    }


    private static String getLang(int i){

        String lang = "";
        switch (i) {
            case 0:  lang = "English";
                break;
            case 1:  lang = "French";
                break;
            case 2:  lang = "German";
                break;
            case 3:  lang = "Spanish";
                break;
            case 4:  lang = "Danish";
                break;
            case 5:  lang = "Finnish";
                break;
            case 6:  lang = "Icelandic";
                break;
            case 7:  lang = "Swedish";
                break;
            case 8:  lang = "Polish";
                break;
            case 9:  lang = "Russian";
                break;
        }
        return lang;
    }
}